/*nothing  // integer to binary;
//here y need not to declare
 bitset<8>y(5);
cout<<y<<endl;
*/
//__gcd(10,20)
 
// int lcm(int a, int b) { return a / gcd(a, b) * b; }
/*
 
//for sub set
//like a,b,c == a,b,c,ab,bc,ac,abc,
//here mask = number of outputs like pow(2,n),n ==3(elements)
//i = number of elements
    for(int mask =1;mask<pow(2,n);mask++)
    {int s=0;
        for(int i = 0;i<n;i++)
        {
            if(mask & (1<<i))
            {
                s =a[i];
            }
        }
 
    }
//string toupper/tolower
transform(s.begin(), s.end(), s.begin(), ::tolower);
 
 
 ///substr finding
 int found = s1.find(s2);
 
    // Check if position is -1 or not
    if (found != string::npos) {
 
     //found returns the index of first letter if found or returns -1
    }
*/
/*
void swap(int *x, int *y)
{
    int t;
    t = *x;
    *x = *y;
    *y = t;
}
//here index[i] is the index after sorting,means 2,3,5,4,1 after sorting 1,2,3,4,5 and index[2] =1(of 3),
//a[index[i]] = indirect sorted
 for (int i = 0; i < n; i++)
        index[i] = i;
for (int i = 0; i < n-1; i++)
        for (int j = i+1; j < n; j++)
            if (A[index[i]] > A[index[j]])
                swap(&index[i], &index[j]);
//    for (int i = 0; i < n; i+5
//    +)
//        printf("%d\n", A[i]);
//
//    printf("index:\n");
//    for (int i = 0; i < n; i++)
//        printf("%d\n", index[i]);
//        printf("A[indexed]:\n");
// for (int i = 0; i < n; i++)
//        cout<<A[index[i]]<<endl;
*/
 
 
/*
 
 
// Function for find difference of larger numbers
string findDiff(string str1, string str2)
{
    // Before proceeding further, make sure str1
    // is not smaller
    if (isSmaller(str1, str2))
        swap(str1, str2);
 
    // Take an empty string for storing result
    string str = "";
 
    // Calculate length of both string
    int n1 = str1.length(), n2 = str2.length();
 
    // Reverse both of strings
    reverse(str1.begin(), str1.end());
    reverse(str2.begin(), str2.end());
 
    int carry = 0;
 
    // Run loop till small string length
    // and subtract digit of str1 to str2
    for (int i = 0; i < n2; i++) {
        // Do school mathematics, compute difference of
        // current digits
 
        int sub
            = ((str1[i] - '0') - (str2[i] - '0') - carry);
 
        // If subtraction is less than zero
        // we add then we add 10 into sub and
        // take carry as 1 for calculating next step
        if (sub < 0) {
            sub = sub + 10;
            carry = 1;
        }
        else
            carry = 0;
 
        str.push_back(sub + '0');
    }
 
    // subtract remaining digits of larger number
    for (int i = n2; i < n1; i++) {
        int sub = ((str1[i] - '0') - carry);
 
        // if the sub value is -ve, then make it positive
        if (sub < 0) {
            sub = sub + 10;
            carry = 1;
        }
        else
            carry = 0;
 
        str.push_back(sub + '0');
    }
 
    // reverse resultant string
    reverse(str.begin(), str.end());
 
    return str;
}
*/
/*
/// Function for finding sum of numbers in string,returns string
string findSum(string str1, string str2)
{
    // Before proceeding further, make sure length
    // of str2 is larger.
    if (str1.length() > str2.length())
        swap(str1, str2);
 
    // Take an empty string for storing result
    string str = "";
 
    // Calculate length of both string
    int n1 = str1.length(), n2 = str2.length();
 
    // Reverse both of strings
    reverse(str1.begin(), str1.end());
    reverse(str2.begin(), str2.end());
 
    int carry = 0;
    for (int i=0; i<n1; i++)
    {
        // Do school mathematics, compute sum of
        // current digits and carry
        int sum = ((str1[i]-'0')+(str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');
 
        // Calculate carry for next step
        carry = sum/10;
    }
 
    // Add remaining digits of larger number
    for (int i=n1; i<n2; i++)
    {
        int sum = ((str2[i]-'0')+carry);
        str.push_back(sum%10 + '0');
        carry = sum/10;
    }
 
    // Add remaining carry
    if (carry)
        str.push_back(carry+'0');
 
    // reverse resultant string
    reverse(str.begin(), str.end());
 
    return str;
}
*/
/*
//to determine any element exist in an sorted vector or not
int found = binary_search(a.begin(),a.end(),x);
//if exist found == 1;else found == 0
*/
/*
 
///binary search
int n;
cin>>n;///number of element ,such that 9
///store these elements into array,or vector, a[.] such that : 3,6,7,10,15,20,23,25,30
int x;///which number i want to search for
cin>>x; ///such that : 10
int l =0,r = n -1;
int found = 0;
while(l<=r)
{
    int m = (l+r)/2;  ///m means middle
    if(a[m] == x)
     {
       found = 1;
       break;
     }
     else if(x<a[m])
        r = m-1;
     else
        l = m+1;
}
if(found)
cout<<"Yes\n";
else
    cout<<"NO\n";
*/
/*
///Binary search///lower bound
int n;
cin>>n;///number of element ,such that 9
///store these elements into array,or vector, a[.] such that : 3,6,7,10,15,20,23,25,30
int x;///which number i want to search for
cin>>x; ///such that : 10
int l =-1,r = n;
 
while(l+1 <r)
{
    int m = (l+r)/2;  ///m means middle
    if(x <= a[m])///if(x<a[m])  means upper bound
     r = m;
     else
        l =m;
}
cout<<r<<endl;
*/
 
/*
//lower,,
int x=60;
std::vector<int>::iterator r;
std::vector<int> a{  10,11,12, 20,20,20, 30, 30, 30, 40, 50 };
sort(a.begin(),a.end());
 
r = std:: lower_bound(a.begin(),a.end(),x);//upper_bound is upper
 
std:: cout<<(r-a.begin())<<endl;
*/
/*
///problem by binary search
///the number of which the summation of 1 to that number is equal or less than n(such as 60 than the answer is 10)
bool ok(ll x)
{
   return x * (x+1)/2;
}
///int main code
cin>>n;
ll l =1,r = 1;
 
///details https://pastebin.ubuntu.com/p/cj3y2WyxKs/
while(ok(r)) r<<= 2;//or r *= 2;
///need basis  u can do l = 0,r = n-1;
while(l+1<r)
{
    ll m = (l+r)/2;
    if(ok(m))
        l = m;
    else
        r  =m;
}
cout<<l<<endl;
*/
/*
///binary search on fraction.
///such that sqrt(9) = 3
double x;
cin>>x;
double l =0,r=x;
for(int z =0;z<60;z++) // this is actually -> //while(fabs(l - r) > eps)
{
    double m = (l+r) / 2;
   if(m*m>x) r = m;
   else
    l = m;
}
///here l and r comes almost same
 
printf("%.15lf",r);
*/
 